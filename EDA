# Part 1: Exploratory Data Analysis (EDA)
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Titanic dataset 
titanic_data = pd.read_csv(r'/kaggle/input/titanic-dataset/Titanic-Dataset.csv')  # Updated path

# Check for missing values
print("Missing values in each column:")
print(titanic_data.isnull().sum())

# Summarize the dataset
print("\nDataset Information:")
print(titanic_data.info())
print("\nStatistical Summary:")
print(titanic_data.describe())

# Plot the distribution of Age
plt.figure(figsize=(10, 6))
sns.histplot(titanic_data['Age'].dropna(), bins=30, kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Compare survival rate across different passenger classes
plt.figure(figsize=(10, 6))
sns.barplot(x='Pclass', y='Survived', data=titanic_data, errorbar=None)
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.xticks([0, 1, 2], ['1st Class', '2nd Class', '3rd Class'])
plt.show()

# Display correlation between numerical features
plt.figure(figsize=(10, 6))
correlation_matrix = titanic_data.select_dtypes(include=['float64', 'int64']).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Part 2: Handling Missing Values
import numpy as np

# Load the Titanic dataset from the specified path
titanic_data = pd.read_csv(r'/kaggle/input/titanic-dataset/Titanic-Dataset.csv')  # Updated path

# Step 1: Fill missing values in the Age column using titles
# Extract titles from the Name column
titanic_data['Title'] = titanic_data['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())

# Calculate the average age for each title
average_age_by_title = titanic_data.groupby('Title')['Age'].mean()

# Fill missing Age values based on the average age of the corresponding title
titanic_data['Age'] = titanic_data.apply(
    lambda row: average_age_by_title[row['Title']] if pd.isnull(row['Age']) else row['Age'], axis=1
)

# Step 2: Handle missing values in Fare and Embarked
# Replace missing Fare values with the median fare of passengers from the same class
titanic_data['Fare'] = titanic_data.groupby('Pclass')['Fare'].transform(
    lambda x: x.fillna(x.median())
)

# Replace missing Embarked values with the most frequent value
most_frequent_embarked = titanic_data['Embarked'].mode()[0]
titanic_data['Embarked'] = titanic_data['Embarked'].fillna(most_frequent_embarked)

# Step 3: Drop the Cabin column due to excessive missing values
titanic_data = titanic_data.drop(columns=['Cabin'])

# Display the updated DataFrame to verify changes
print(titanic_data.isnull().sum())
print(titanic_data.head())
# Part 3: Feature Engineering
# Load the Titanic dataset from the specified path
titanic_data = pd.read_csv(r'/kaggle/input/titanic-dataset/Titanic-Dataset.csv')  # Updated path

# Step 1: Create FamilySize feature
titanic_data['FamilySize'] = titanic_data['SibSp'] + titanic_data['Parch'] + 1

# Step 2: Convert Age into categories
def categorize_age(age):
    if age < 13:
        return 'Child'
    elif 13 <= age < 20:
        return 'Teen'
    elif 20 <= age < 65:
        return 'Adult'
    else:
        return 'Senior'

titanic_data['AgeCategory'] = titanic_data['Age'].apply(categorize_age)

# Step 3: Convert FamilySize into categories
def categorize_family_size(size):
    if size == 1:
        return 'Single'
    elif 2 <= size <= 4:
        return 'Small Family'
    else:
        return 'Large Family'

titanic_data['FamilySizeCategory'] = titanic_data['FamilySize'].apply(categorize_family_size)

# Display the updated DataFrame to verify changes
print(titanic_data[['Age', 'AgeCategory', 'FamilySize', 'FamilySizeCategory']].head())

# Part 4: One-Hot Encoding
# Load the Titanic dataset from the specified path
titanic_data = pd.read_csv(r'/kaggle/input/titanic-dataset/Titanic-Dataset.csv')  # Updated path

# Step 1: Handle missing values and feature engineering (as previously discussed)
# Fill missing Age values, handle Fare and Embarked, and drop Cabin
# (Assuming this part is already done)

# Create FamilySize feature
titanic_data['FamilySize'] = titanic_data['SibSp'] + titanic_data['Parch'] + 1
# Create FamilySizeCategory
def categorize_family_size(size):
    if size == 1:
        return 'Single'
    elif 2 <= size <= 4:
        return 'Small Family'
    else:
        return 'Large Family'

titanic_data['FamilySizeCategory'] = titanic_data['FamilySize'].apply(categorize_family_size)

# Step 2: Check if FamilySizeCategory exists
print("Columns in the DataFrame before one-hot encoding:")
print(titanic_data.columns)

# Step 3: Identify categorical variables to be one-hot encoded
categorical_vars = ['Sex', 'Embarked', 'Pclass', 'FamilySizeCategory']

# Check if all categorical variables are present
missing_vars = [var for var in categorical_vars if var not in titanic_data.columns]
if missing_vars:
    print(f"Warning: The following categorical variables are missing: {missing_vars}")
else:
    # Step 4: Apply one-hot encoding
    titanic_encoded = pd.get_dummies(titanic_data, columns=categorical_vars, drop_first=True)

    # Display the first few rows of the updated DataFrame to verify changes
    print(titanic_encoded.head())
